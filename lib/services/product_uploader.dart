// lib/utils/product_uploader.dart
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter_ecommerce/models/home/product.dart'; // ƒê∆∞·ªùng d·∫´n ƒë·∫øn model Product c·ªßa b·∫°n
import 'package:flutter_ecommerce/services/home_services.dart'; // ƒê∆∞·ªùng d·∫´n ƒë·∫øn HomeServicesImpl

// ID Admin Seller c·ªßa b·∫°n
const String ADMIN_SELLER_ID_FOR_UPLOAD = "M7CFrKwP9WUy8j5BdFq3F8zM9rl2";

class ProductUploader {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final HomeServicesImpl _homeServices = HomeServicesImpl();

  Future<void> uploadAllProductsForAdmin() async {
    final String adminSellerId = ADMIN_SELLER_ID_FOR_UPLOAD;

    if (adminSellerId.isEmpty) {
      print("‚ùå Admin Seller ID is not defined. Aborting upload.");
      throw Exception("Admin Seller ID is missing.");
    }

    try {
      print("üöÄ Starting product upload for Admin Seller ID: $adminSellerId (Using IDs from JSON)");

      final List<Product> localProducts = await _homeServices.getAllProducts();

      if (localProducts.isEmpty) {
        print("‚ÑπÔ∏è No products found in local JSON. Nothing to upload.");
        return;
      }
      print("‚úÖ Found ${localProducts.length} products in JSON. Preparing to upload to Firestore...");

      final CollectionReference productsCollection = _firestore.collection('products');
      WriteBatch batch = _firestore.batch();
      int operationsInBatch = 0;
      int totalProductsUploaded = 0;

      for (var localProduct in localProducts) {
        // Ki·ªÉm tra xem localProduct.id c√≥ h·ª£p l·ªá kh√¥ng (kh√¥ng r·ªóng)
        if (localProduct.id.isEmpty) {
          print("‚ö†Ô∏è Skipping product with empty ID from JSON: ${localProduct.title}");
          continue; // B·ªè qua s·∫£n ph·∫©m n√†y
        }

        Map<String, dynamic> productDataForFirestore = localProduct.toMap();

        productDataForFirestore['sellerId'] = adminSellerId;
        productDataForFirestore['createdAt'] = FieldValue.serverTimestamp();
        productDataForFirestore['updatedAt'] = FieldValue.serverTimestamp();

        // --- S·ª¨ D·ª§NG ID T·ª™ JSON ---
        // L·∫•y tham chi·∫øu document b·∫±ng ID t·ª´ localProduct
        DocumentReference docRef = productsCollection.doc(localProduct.id);

        // V√¨ ID document ƒë√£ l√† localProduct.id, ch√∫ng ta c√≥ th·ªÉ x√≥a tr∆∞·ªùng 'id'
        // kh·ªèi d·ªØ li·ªáu map ƒë·ªÉ tr√°nh l∆∞u tr·ªØ th·ª´a.
        // ƒêi·ªÅu n√†y t√πy thu·ªôc v√†o vi·ªác b·∫°n c√≥ mu·ªën gi·ªØ tr∆∞·ªùng 'id' b√™n trong document hay kh√¥ng.
        // N·∫øu `Product.fromMap` c·ªßa b·∫°n ƒë·ªçc ID t·ª´ `snapshot.id`, th√¨ vi·ªác c√≥ tr∆∞·ªùng `id`
        // b√™n trong document l√† kh√¥ng c·∫ßn thi·∫øt. // X√≥a tr∆∞·ªùng 'id' kh·ªèi map data

        batch.set(docRef, productDataForFirestore);
        // N·∫øu b·∫°n mu·ªën MERGE thay v√¨ SET (ghi ƒë√® ho√†n to√†n), d√πng:
        // batch.set(docRef, productDataForFirestore, SetOptions(merge: true));
        // Merge h·ªØu √≠ch n·∫øu b·∫°n mu·ªën c·∫≠p nh·∫≠t m√† kh√¥ng x√≥a c√°c tr∆∞·ªùng kh√¥ng c√≥ trong productDataForFirestore
        // nh∆∞ng ƒë·ªëi v·ªõi l·∫ßn upload ƒë·∫ßu, set th∆∞·ªùng ph√π h·ª£p h∆°n.

        operationsInBatch++;
        totalProductsUploaded++;

        if (operationsInBatch >= 100) {
          print("‚è≥ Committing batch of $operationsInBatch products...");
          await batch.commit();
          batch = _firestore.batch();
          operationsInBatch = 0;
          print("‚òëÔ∏è Batch committed. Continuing upload...");
        }
      }

      if (operationsInBatch > 0) {
        print("‚è≥ Committing final batch of $operationsInBatch products...");
        await batch.commit();
      }

      print("üéâ Successfully uploaded/updated $totalProductsUploaded products to Firestore for Admin Seller ID: $adminSellerId!");

    } catch (e) {
      print("‚ùå Error uploading products to Firestore: $e");
      throw Exception("Upload failed: ${e.toString()}");
    }
  }
}